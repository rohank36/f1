meeting_id, session_id 

Are team results in 2015 predictive of team results today when the car and drivers are different? Not predicative.

historical years to look at: 2022-2024. 2022 new regulations came in. 

*****
issue: some drivers have more historical data than others, how to bridge gap for newer drivers.
- f2 comparable to f1? don't use f2 data for rookies. 
- maybe use practice data only for rookies
- rookies only have 2025 data, so what to use for test set? 
--> Each rookie inherits their team's average performance (e.g. mean qualifying position, race finish etc). Figure out a way to make this reasonable. As most of the time a rookie won't be able to live up to past average performances of the team.

for predicting in sports, how to use historical data? When in the past the team/driver may have been completely different? 
--> include year in row (encoded)

might have to lag to get proper autoregressive modelling? because you want to capture how peoples past performances impact current ones. e.g. MOMENTUM. Look into how to do this more.
--> Use exponentially weighted average of past 3-5 races to capture their performance over time for different features. 

Figure out what you want your model to output for the race rankings. 
*****

when weather=wet/rainy, driver 80% team 20% . Else driver 20% car 40% team 40%.  

don't need to use practice times. Qualifying/Sprints and Race data most important. 

Number of stints + compounds used = strategy 

stint = portion of the race on specific tire

SOFT = flying but short duration 
MED = both
HARD = slowest but longest duration
Certain circuits have tires that are better than others. 

Must have at least 1 pitstop during race and must change tire compound 

Methodology:
- understand data, build out dataset
- build end to end pipeline with easy dumb baselines
- overfit on training data
- regularize (heavy regularization will be needed due to small num of examples but relatively high num of features)
- tune

historical data --> 1 day before race, make the prediction. Predict race finishing positions (maybe just look at top 10 and predict it super welll, reasoning = rookies will mostly be outside of top 10 and we don't have much data on them ) 

after basic predictive model is built, look into building a hedge/risk model to optimize betting placements (take inspiration from financial hedging/risk models)




### Training Notes
removing location feature, did not really impact model 1. Raised training acc of model 2 to 100% did not affect val acc. 

removing ["Event_Type","Sprint_Qual_Position","Sprint_Race_Position"] negatively impacted val performance for both m1 and m2. Didn't affect training acc. 

Changing the target to binary (whether or not they are top x) increases acc A LOT (87-90% across trn/val/test). AUROC=0.9 as well which is good

using the balanced classes helped improve recall a lot, but at the cost of precision. 

Precision,Recall,f1_score are the metrics you should care about. Because your data is class imbalanced and you care about TPs and FPs.

lag stint and event type seem to be useless features. maybe get rid of them? Tried this and not significant improvement but model didn't get worse either. 

It seems that it only matters if you're on certain teams (e.g. Red Bull, Mercedes, Ferrari, McLaren). So maybe only one hot encode those teams?
    - after doing this, we saw an increase in f1 score!!

f1 score increases dramatically when the classification task is 1==if top 6 else 0. from 0.666 --> 0.85
    - obvi this makes sense because the model can tell well who is usually in the top 6 pretty well.

for some reason hyperparam tuning made performance worse...weird?

Tried encoding race features by normalizing(dividing by max for that feature for that race) and it decrease f1 score for both trn (by 0.01) and val by 0.08!!! so not good feature engineering for this one.

Tried summing the sector times to one feature to see if that would reduce noise, but it decreases the val f1 score by 0.05. so again not good feature engineering for this one.

Tried binary encoding (1/0) for circuit type, but that decreased val f1 by 0.01. Small decrease. Thought this would make a positive difference. Guess not lol.

Tried just getting rid of the sector times and race date code. Val f1 score was the exact same with and without them. Meaning they must not be significant. Your feature analysis was right.

SECTORTIMES MIGHT BE FAST FOR DRIVER THAT STILL FINISHES POORLY BECAUSE DRIVER IS SO FAR BEHIND THEY ARE IN CLEAN AIR (NO CARS EXHAUST BLOWING ONTO THEM), DRIVER IN FIRST ALSO HAS CLEAN AIR.

TOTAL RACE TIME (how long it took them to finish the race) relative to the race winner (have to think about how to encode this) is a good proxy for race pace. 



### To Dos
Refactor and clean code to make it easy to analyze/experiment/test with different features (refer to iphone notes)

Need to increase recall a lot while maintaing precision
    - engineer better features (follow a system like sequential feature selection etc)
        - play around with more features so see if you can squeeze some performance
        - try driver vs teammate metric e.g. diff in finishing position --> this captures drivers skill when the car is the same (but might not be a good metric to capture because if someone qualifies p10 and their teammate is p20, then they're much better then teamate but still bad overall.)
        - avg pos gained equation
        - add lagged ewa qual position? might given indication about how they've been qualifying recently. if qual_position much better then lagged qual position might indicate that they're gonna do better in race today.
        - n_races (to show experience)
        - Experiment with changing alpha value for driver encoding ewa. 
        - consider looking into other features as well that aren't currently in your dataset.
        - weighted average pit stop time?
    - boosting (using another model e.g. regression model to correct systematic errors)
    - Try different models that better handle class imbalance 

Figure out a way to liimt the number of drivers selected to be in top x (e.g. model somtimes predicts x+1 or x-1 or even x-2 drivers to be in top x)

Need to figure out a way to ordinally encode the drivers, so that their ranking is relative to the other drivers performance for that race.
    - Will ordinally encoding their race times help with this?

Write code to add the new test data

For actually placing the bets you may need a model to choose which site to use based on the odds they have. Can do arb here? 

### To think about
Take a momment to fundamentally understand what you're doing + the math/stats behind it.
Can maybe do multi site bets??


